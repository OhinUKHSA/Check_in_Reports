---
title: "`r paste0('Professional Registration Workforce Check-in Results: ', format(Sys.Date(), '%B %Y'))`"
format:
  html:
    embed-resources: true
    page-layout: full
    fig-cap: true
    toc: true
    toc-depth: 3
editor: visual
---

<!-- 
---------------------------
 Script name: checkin_6Month

 Purpose of script:
   Analyse ~6 months of Check-in eNP data to show directionality using
   Spearman correlations, significance (p-values), and distribution (median, IQR),
   with interactive plots and tables by workforce group.

 Author: Owen Williams

 Date Created: 19/09/2025
---------------------------

 Notes:
 - Make sure packages are installed first by running: Load_Packages.R
 - Required data (CSV) in /data/:
     * data.csv  — extract data from People Survey Check-In results sourced from 
     there PowerBi dashboard 
---------------------------
-->



```{r}
#| echo: false
#| message: false
#| warning: false

# Libraries
library(tidyverse)
library(reactable)
library(htmltools)
library(crosstalk)
library(plotly)
library(tsibble)
library(scales) 

```

```{r tabset-css, echo=FALSE, results='asis'}
htmltools::tags$style(HTML("
/* Style the tab panel content */
.panel-tabset .panel {
  background-color: #ffffff;
  padding: 1rem;
  border: 1px solid #000000;
  border-radius: 6px;
  margin-top: 0.5rem;
}

/* Unselected tab headers */
.nav-tabs > li:not(.active) > a {
  font-weight: bold;
  color: #7a9ae6 ;
  background-color: #ffffff ;
  border: 1px solid #000000 ;
}

/* Selected (active) tab header */
.nav-tabs > li.active > a,
.nav-tabs > li.active > a:focus,
.nav-tabs > li.active > a:hover {
  background-color: #006666;
  color: #ffffff ;
  border: 1px solid #000000 ;
}
"))
```

```{r}
#| echo: false
#| message: false
#| warning: false

# Description
#* This code set 

# Load and process data
df <- read.csv("data/data.csv") %>%
  mutate(Month = my(Month)) %>%
  arrange(Question, Month)

# Summarise per question
df2 <- df %>%
  group_by(Question) %>%
  summarise(
    GMC_UKPHR_eNPs = list(GMC_UKPHR_eNPs),
    GMC_eNPs = list(GMC_eNPs),
    UKPHR_eNPs = list(UKPHR_eNPs),
    Organisation_eNPs = list(Organisation_eNPs),
    GMC_UKPHR_Responses = list(GMC_UKPHR_Responses),
    .groups = "drop"
  ) %>%
  mutate(
    Barchart  = GMC_UKPHR_eNPs,
    Workforce = "GMC & UKPHR",
    eNP       = map_dbl(Barchart, ~ tail(.x, 1)),
    Trend     = map_chr(Barchart, ~ {
      x <- .x
      if (length(x) < 2 || anyNA(tail(x, 2))) return(NA_character_)
      diff <- tail(x, 1) - tail(x, 2)[1]
      if (diff > 0) paste("up", round(diff, 1))
      else if (diff < 0) paste("down", round(diff, 1))
      else "flat 0"
    }),
    Responses = map_dbl(GMC_UKPHR_Responses, ~ tail(.x, 1)) 
  ) %>%
    select(Question, Workforce, eNP, Trend, Barchart, everything())

# Colour function for bars and text
bar_colour <- function(values) {
  sapply(values, function(v) {
    if (v < 0) {
      "#870703"
    } else if (v < 20) {
      "#f27500"
    } else if (v < 30) {
      "#f2c600"
    } else {
      "#008000"
    }
  })
}


# Create function to show bar chart for enp scores
bar_chart_pos_neg <- function(label, value, max_value = 100, height = "1rem") {
  neg_chart <- div(style = list(flex = "1 1 0"))
  pos_chart <- div(style = list(flex = "1 1 0"))

  width <- paste0(abs(value / max_value) * 100, "%")
  fill_color <- bar_colour(value)  # Get color based on value

  if (value < 0) {
    bar <- div(style = list(marginLeft = "0.5rem", background = fill_color, width = width, height = height))
    chart <- div(
      style = list(display = "flex", alignItems = "center", justifyContent = "flex-end"),
      label,
      bar
    )
    neg_chart <- tagAppendChild(neg_chart, chart)
  } else {
    bar <- div(style = list(marginRight = "0.5rem", background = fill_color, width = width, height = height))
    chart <- div(style = list(display = "flex", alignItems = "center"), bar, label)
    pos_chart <- tagAppendChild(pos_chart, chart)
  }

  div(style = list(display = "flex"), neg_chart, pos_chart)
}


# SharedData object for interactivity
shared_df <- SharedData$new(df2, key = ~Question, group = "enp")

# Extract Latest month
last_month <- format(max(df$Month, na.rm = TRUE), '%B %Y')
```

# 1. Background

This Report summarises Check - In results from professional registrants ..... during `{r} last_month`

# 2. Question-Level eNP Trends

## How to read the figure

-   Use the Question dropdown to filter the view. The chart updates to show all monthly eNP values for the selected question.
-   Switch tabs to view each workforce group: GMC & UKPHR, GMC, UKPHR, or Organisation.
-   Hover over points to see the exact value, month, and number of responses.

## How to read the table (trends)

-   **Correlation**: Shows the direction and strength of the trend over time. Values range from **–1 to +1**; where *negative = downward trend* and *positive = upward trend*. Cells are colour-coded: **red scale** for negative; **blue scale** for positive (deeper shades = stronger trend).

-   **p-value**: Indicates how confident we are that the observed trend is real. Values range from **0 to 1** where values closer to 0 is stronger evidence. Generally, p \< 0.05 is considered statistically significant. Cells are shaded to reflect where **blue is significant** and **red is not significant**.

-   **Direction**: A simple summary combining correlation and p-value. Up (sig) = significant upward trend; Down (sig) = significant downward trend, NS = not significant.

-   **Median**: The middle value where half of the results are higher and half are lower.

-   **IQR (Interquartile Range)**: Shows the spread of the middle half of the results, with both the lower and upper limits given (Q1–Q3). For example, an IQR of 8–14 means that 50% of results fall between 8 and 14.

***Notes:** We use Spearman correlation because the sample is small and we do not assume normality. Colour intensity reflects the magnitude of the correlation; paler shades indicate values near zero (little or no trend)*

::: callout-important
## 2.1. eNP Score Colour Coding and Interpretation

Select a **Check-In Question** from the dropdown menu to filter data accordingly.

```{r}
#| echo: false
#| message: false
#| warning: false

# Description
#* This code set provide interactivity allowing user to select question to look
#* at how this changes overtime. 
#* 
#* Combined with code below this will provide access to all workforce group data


# Make Question a factor with the default level FIRST
df3_full <- df %>%
  select(Question, Month,
         GMC_UKPHR_eNPs, GMC_UKPHR_Responses,
         GMC_eNPs, GMC_Responses, UKPHR_eNPs, UKPHR_Responses,
         Organisation_eNPs, Organisation_Responses) %>% 
         # Create new filter column for formatted date
  mutate(
    Month = as.Date(Month),
    Month_label = format(Month, '%B %Y')
  ) %>%
  arrange(Question, Month) %>%
  mutate(
    Month_label = factor(Month_label, levels = unique(Month_label))
  )

# Create correlation table
res = df %>%
  select(-c(7:10)) %>%
  mutate(Month = yearmonth(Month)) %>%
  pivot_longer(cols = GMC_eNPs:Organisation_eNPs,
               names_to = "Group", values_to = "eNP") %>%
  group_by(Question, Group) %>%
  group_modify(~ {
    x <- .x$eNP
    test <- cor.test(as.numeric(.x$Month), x,
                     use = "complete.obs", method = "spearman")
    qs <- quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE, type = 7)
    tibble(
      sample.Size = sum(complete.cases(.x$Month, x)),
      Correlation = unname(test$estimate),  # Spearman rho
      p_value     = test$p.value,
      Median      = unname(qs[2]),
      IQR         = paste0(IQR(x, na.rm = TRUE, type = 7), ' [', unname(qs[1]), '-', unname(qs[3]), ']')
    )
  })

res_table = res %>%
  mutate(
    Correlation = as.numeric(Correlation),
    p_value     = as.numeric(p_value),
    sample.Size = as.integer(sample.Size),
    Direction   = case_when(
      p_value < 0.05 & Correlation > 0 ~ "↑ Up (sig)",
      p_value < 0.05 & Correlation < 0 ~ "↓ Down (sig)",
      TRUE                             ~ "NS",
    ),
    Median = as.numeric(Median),
    IQR = as.character(IQR)
  ) %>%
  arrange(Question, Group) %>%
  relocate(Median, IQR, .after = last_col())


# Create shared data object
shared_df3_full = SharedData$new(df3_full)
shared_correlation_comb = SharedData$new(res_table %>% filter(Group == 'GMC_UKPHR_eNPs'))
shared_correlation_GMC = SharedData$new(res_table %>% filter(Group == 'GMC_eNPs'))
shared_correlation_UKPHR = SharedData$new(res_table %>% filter(Group == 'UKPHR_eNPs'))
shared_correlation_org = SharedData$new(res_table %>% filter(Group == 'Organisation_eNPs'))


# position and create filters for data 
bscols(
  widths = c(8,4),
  # Create filter for Question
  filter_select(
    id       = "question_filter",
    label    = "Choose a Question:",
    shared   = shared_df3_full,
    ~Question,
    multiple = FALSE
    )
  )



```
:::

```{r}
#| echo: false
#| message: false
#| warning: false

# Description
#* Creating interactive figures for each of the workforce Groups based on the filters

# Create Colour scheme for data points
color_fun <- function(vals) {
  sapply(vals, function(v) {
    if (v < 0) "#870703"
    else if (v < 20) "#f27500"
    else if (v < 30) "#f2c600"
    else "#008000"
  })
}


# colour scheme for organisation 
color_fun_organ <- function(vals) {
  sapply(vals, function(v) {
    if (v < 0) "#fd9e9b"
    else if (v < 20) "#ffd7b3"
    else if (v < 30) "#fff0b3"
    else "#b3ffb3"
  })
}


################
# Create plots #
################

# Create Function
plotlyFunction <- function(group_col, name) {
  
  # colour scheme
  base = if (inherits(shared_df3_full, "SharedData")) shared_df3_full$data() else shared_df3_full
  resp_col = sub("_eNPs$", "_Responses", group_col)
  prim_colors = if (exists("color_fun", mode = "function"))
    color_fun(base[[group_col]]) else NULL
  org_colors  = if (exists("color_fun_organ", mode = "function"))
    color_fun_organ(base[["Organisation_eNPs"]]) else NULL
  
  # Create figure
  plot_ly(
    shared_df3_full,
    x = ~Month,
    y = as.formula(paste0("~", group_col)),   # dynamic mapping
    type = "scatter",
    mode = "lines+markers",
    marker = c(list(size = 10), if (!is.null(prim_colors)) list(color = prim_colors)),
    line   = list(color = "#006666"),
    hoverinfo = "text",
    text = ~paste0(
      "<br>Question: ", Question,
      "<br>", name, ": ", get(group_col),
      "<br>Month: ", format(Month, "%B %Y"),
      "<br>Responses: ", get(resp_col)
    ),
    name = name
  ) %>%
    add_trace(
      y = ~Organisation_eNPs,
      type = "scatter",
      mode = "lines+markers",
      marker = c(list(size = 10), if (!is.null(org_colors)) list(color = org_colors)),
      line   = list(color = "#ff91ff", dash = "dash"),
      hoverinfo = "text",
      text = ~paste0(
        "<br>Question: ", Question,
        "<br>Organisation eNPs: ", Organisation_eNPs,
        "<br>Month: ", format(Month, "%B %Y"),
        "<br>Responses: ", Organisation_Responses
      ),
      name = "Organisation eNPs"
    ) %>%
    plotly::layout(
      title = paste(name, "Trend"),
      xaxis = list(title = "Month", type = "date", tickformat = "%b %Y",
                   dtick = "M1", tickangle = -45),
      yaxis = list(title = "eNPs", range = c(-100, 100)),
      legend = list(title = list(text = "Group"), orientation = "h",
                    x = 0.5, xanchor = "center", y = -0.3, yanchor = "top"),
      margin = list(b = 100)
    )
}

Combined_plot = plotlyFunction('GMC_UKPHR_eNPs', 'GMC and UKPHR combined eNPs')

GMC_plot = plotlyFunction('GMC_eNPs', 'GMC eNPs')

UKPHR_plot = plotlyFunction('UKPHR_eNPs', 'UKPHR eNPs')

Organisation_plot = plot_ly(
  shared_df3_full,
  x = ~Month,
  y = ~Organisation_eNPs,
  type = "scatter",
  mode = "lines+markers",
  marker = list(color = color_fun(shared_df3_full$data()$Organisation_eNPs), size = 10),
  line = list(color = "#ff91ff", dash = "dash"),
  hoverinfo = "text",
  text = ~paste(
    "<br>Question:", Question,
    "<br>eNPs:", Organisation_eNPs,
    "<br>Month:", format(Month, '%B %Y'),
    "<br>Responses:", Organisation_Responses
  )
) %>%
  layout(
    title = "Organisation eNPs Trend",
    xaxis = list(title = "Month",
                 type = "date",
                 tickformat = "%b %Y",
                 dtick = "M1",
                 tickangle = -45),
    yaxis = list(title = "GMC eNPs",
                 range = c(-100, 100))
  )


####################################
# Plot for whole organisation eNPs #
####################################

Organisation_plot <- plot_ly(
  shared_df3_full,
  x = ~Month,
  y = ~Organisation_eNPs,
  type = "scatter",
  mode = "lines+markers",
  marker = list(color = color_fun(shared_df3_full$data()$Organisation_eNPs), size = 10),
  line = list(color = "#ff91ff", dash = "dash"),
  hoverinfo = "text",
  text = ~paste(
    "<br>Question:", Question,
    "<br>eNPs:", Organisation_eNPs,
    "<br>Month:", format(Month, '%B %Y'),
    "<br>Responses:", Organisation_Responses
  )
) %>%
  layout(
    title = "Organisation eNPs Trend",
    xaxis = list(title = "Month",
                 type = "date",
                 tickformat = "%b %Y",
                 dtick = "M1",
                 tickangle = -45),
    yaxis = list(title = "GMC eNPs",
                 range = c(-100, 100))
  )


```

```{r}
#| echo: false
#| message: false
#| warning: false

# Description
#* Creating interactive Tables for each of the workforce Groups based on the filters


corr_bg <- function(r) {
  if (is.na(r)) return("#FFFFFF")
  if (r <= 0) {
    t <- rescale(r, to = c(0, 1), from = c(-1, 0))
    col <- colorRamp(c("#991500", "#F5F1F0"))(t)
  } else {
    t <- rescale(r, to = c(0, 1), from = c(0, 1))
    col <- colorRamp(c("#F5F1F0", "#002266"))(t)
  }
  rgb(col[1]/255, col[2]/255, col[3]/255)
}

# --- p-value background colour ---
p_bg <- function(p) {
  if (is.na(p)) return("#FFFFFF")
  if (p <= 0.05) {
    t <- rescale(p, to = c(0, 1), from = c(0, 0.05))
    col <- colorRamp(c("#002266", "#D4E2FA"))(t)
  } else {
    t <- rescale(p, to = c(0, 1), from = c(0.05, 1))
    col <- colorRamp(c("#FAD8D4", "#991500"))(t)
  }
  rgb(col[1]/255, col[2]/255, col[3]/255)
}

# --- function to compute luminance and pick text color ---
pick_text_color <- function(hex) {
  rgb_vals <- col2rgb(hex) / 255
  lum <- 0.299*rgb_vals[1] + 0.587*rgb_vals[2] + 0.114*rgb_vals[3]
  if (lum > 0.6) "#000000" else "#FFFFFF"
}

##########
# Tables #
##########

# Create function
SharedTable = function(data) {
  reactable(
    data,
    searchable = FALSE,
    filterable = FALSE,
    pagination = FALSE,
    compact = TRUE,
    striped = TRUE,
    highlight = TRUE,
    defaultSorted = list(Question = "asc"),
    defaultColDef = colDef(align = "center", minWidth = 90),
    columns = list(
      Question    = colDef(align = "left", minWidth = 220),
      Group       = colDef(show = FALSE),   
      sample.Size = colDef(name = "No. Months"),
      Correlation = colDef(
        name   = "Correlation",
        format = colFormat(digits = 3),
        style  = function(value) {
          bg <- corr_bg(as.numeric(value))
          list(background = bg, color = pick_text_color(bg), fontWeight = "bold")
        }
      ),
      p_value     = colDef(
        name   = "p-value",
        format = colFormat(digits = 3),
        style  = function(value) {
          bg <- p_bg(as.numeric(value))
          list(background = bg, color = pick_text_color(bg), fontWeight = "bold")
        }
      ),
      Direction   = colDef(
        name = "Direction",
        style = function(value) {
          if (grepl("Up", value))       list(color = "#1a7f37", fontWeight = "bold")
          else if (grepl("Down", value)) list(color = "#b22222", fontWeight = "bold")
          else                           list(color = "#444")
        }
      ),
      Median = colDef(
        name   = "Median",
        format = colFormat(digits = 2),
        style  = function(value) {
          if (is.na(value)) return(list(color = "#444"))
          bg <- bar_colour(value)              # your function
          list(background = bg, color = pick_text_color(bg), fontWeight = "bold")
        }
      ),
      IQR = colDef(
        name = "IQR"
      )
    ),
    theme = reactableTheme(
      headerStyle = list(
        backgroundColor = "black",
        color = "white",
        fontWeight = "bold"
      )
    )
  )
}

# create tables
combined_table = SharedTable(shared_correlation_comb)
GMC_table = SharedTable(shared_correlation_GMC)
UKPHR_table = SharedTable(shared_correlation_UKPHR)
Organisation_table = SharedTable(shared_correlation_org)

```

::::::::::::::: panel-tabset
### GMC and UKPHR

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

Combined_plot
```
:::

<!-- Add vertical space -->

::: {style="margin-top: 40px;"}
:::

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

combined_table
```
:::

### GMC

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

GMC_plot
```
:::

<!-- Add vertical space -->

::: {style="margin-top: 40px;"}
:::

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

GMC_table

```
:::

### UKPHR

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

UKPHR_plot

```
:::

<!-- Add vertical space -->

::: {style="margin-top: 40px;"}
:::

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false
UKPHR_table

```
:::

### Organisation

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false

Organisation_plot
```
:::

<!-- Add vertical space -->

::: {style="margin-top: 40px;"}
:::

::: cell
```{r}
#| echo: false
#| message: false
#| warning: false
Organisation_table

```
:::
:::::::::::::::

------------------------------------------------------------------------

# 3. Responses

This section shows month-on-month number of respondents from GMC and UKPHR who have completed the People Check-In survey

Use checkbox to filter Professional workforce group.

::: callout-important
## 3.1. Select Professional Work force Group

```{r}
#| echo: false
#| message: false
#| warning: false

# Create Response Table
ResponseTable = df %>% 
  select(!c(GMC_eNPs, UKPHR_eNPs, GMC_UKPHR_eNPs, Organisation_eNPs)) %>%
  filter(Question == 'How would you classify your mental health') %>%
  pivot_longer(cols = !c(Month, Question), names_to = 'Group', values_to = 'Participation') %>%
  mutate(Month = yearmonth(Month)) %>%
  filter(Group != 'Organisation_Responses') %>%
  as_tsibble(index = Month, key = Group)


# Convert to shared
shared_Response = SharedData$new(ResponseTable)

# create filter for 

filter_checkbox(
    id = "Date",
    label = "Select Group",
    sharedData = shared_Response,
    group = ~Group
    )

```
:::

```{r}
#| echo: false
#| message: false
#| warning: false

# Create figure
  plot_ly(
  data = shared_Response,
  x = ~as.Date(Month),
  y = ~Participation,
  color = ~Group,
  type = 'scatter',
  mode = 'lines+markers',
  line = list(width = 2),
  marker = list(size = 8),
  hoverinfo = "text",
  text = ~paste(
    "<br>Participation:", Participation,
    "<br>Month:", format(as.Date(Month), '%B %Y')
  )
) %>%
  layout(
    title = "Professional Registration Check-In Responses Month-on-Month",
    xaxis = list(
      title = "Month",
      tickformat = "%b %Y",
      dtick = "M1",
      tickangle = -45
    ),
    yaxis = list(title = "Responses", range = c(0, 80), dtick = 20),
    legend = list(title = list(text = "Group"), orientation = 'h',
                  x = 0.5, xanchor = "center", y = -0.3, yanchor = "top"),
    margin = list(b = 100)
  )




```
